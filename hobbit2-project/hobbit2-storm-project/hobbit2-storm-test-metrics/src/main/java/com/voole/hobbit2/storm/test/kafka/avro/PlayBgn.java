/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.voole.hobbit2.storm.test.kafka.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlayBgn extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlayBgn\",\"namespace\":\"com.voole.hobbit2.storm.test.kafka.avro\",\"fields\":[{\"name\":\"sessionId\",\"type\":\"string\"},{\"name\":\"stamp\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PlayType\",\"symbols\":[\"BGN\",\"END\",\"ALIVE\",\"PARTITIONINFO\"]}},{\"name\":\"filled\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence sessionId;
  @Deprecated public long stamp;
  @Deprecated public com.voole.hobbit2.storm.test.kafka.avro.PlayType type;
  @Deprecated public java.lang.CharSequence filled;
  

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PlayBgn() {}

  /**
   * All-args constructor.
   */
  public PlayBgn(java.lang.CharSequence sessionId, java.lang.Long stamp, com.voole.hobbit2.storm.test.kafka.avro.PlayType type, java.lang.CharSequence filled) {
    this.sessionId = sessionId;
    this.stamp = stamp;
    this.type = type;
    this.filled = filled;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sessionId;
    case 1: return stamp;
    case 2: return type;
    case 3: return filled;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sessionId = (java.lang.CharSequence)value$; break;
    case 1: stamp = (java.lang.Long)value$; break;
    case 2: type = (com.voole.hobbit2.storm.test.kafka.avro.PlayType)value$; break;
    case 3: filled = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sessionId' field.
   */
  public java.lang.CharSequence getSessionId() {
    return sessionId;
  }

  /**
   * Sets the value of the 'sessionId' field.
   * @param value the value to set.
   */
  public void setSessionId(java.lang.CharSequence value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'stamp' field.
   */
  public java.lang.Long getStamp() {
    return stamp;
  }

  /**
   * Sets the value of the 'stamp' field.
   * @param value the value to set.
   */
  public void setStamp(java.lang.Long value) {
    this.stamp = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public com.voole.hobbit2.storm.test.kafka.avro.PlayType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.voole.hobbit2.storm.test.kafka.avro.PlayType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'filled' field.
   */
  public java.lang.CharSequence getFilled() {
    return filled;
  }

  /**
   * Sets the value of the 'filled' field.
   * @param value the value to set.
   */
  public void setFilled(java.lang.CharSequence value) {
    this.filled = value;
  }

  /** Creates a new PlayBgn RecordBuilder */
  public static com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder newBuilder() {
    return new com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder();
  }
  
  /** Creates a new PlayBgn RecordBuilder by copying an existing Builder */
  public static com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder newBuilder(com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder other) {
    return new com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder(other);
  }
  
  /** Creates a new PlayBgn RecordBuilder by copying an existing PlayBgn instance */
  public static com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder newBuilder(com.voole.hobbit2.storm.test.kafka.avro.PlayBgn other) {
    return new com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder(other);
  }
  
  /**
   * RecordBuilder for PlayBgn instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlayBgn>
    implements org.apache.avro.data.RecordBuilder<PlayBgn> {

    private java.lang.CharSequence sessionId;
    private long stamp;
    private com.voole.hobbit2.storm.test.kafka.avro.PlayType type;
    private java.lang.CharSequence filled;

    /** Creates a new Builder */
    private Builder() {
      super(com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[0].schema(), other.sessionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stamp)) {
        this.stamp = data().deepCopy(fields()[1].schema(), other.stamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.filled)) {
        this.filled = data().deepCopy(fields()[3].schema(), other.filled);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PlayBgn instance */
    private Builder(com.voole.hobbit2.storm.test.kafka.avro.PlayBgn other) {
            super(com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.SCHEMA$);
      if (isValidValue(fields()[0], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[0].schema(), other.sessionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stamp)) {
        this.stamp = data().deepCopy(fields()[1].schema(), other.stamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.filled)) {
        this.filled = data().deepCopy(fields()[3].schema(), other.filled);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'sessionId' field */
    public java.lang.CharSequence getSessionId() {
      return sessionId;
    }
    
    /** Sets the value of the 'sessionId' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder setSessionId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sessionId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sessionId' field has been set */
    public boolean hasSessionId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sessionId' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder clearSessionId() {
      sessionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'stamp' field */
    public java.lang.Long getStamp() {
      return stamp;
    }
    
    /** Sets the value of the 'stamp' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder setStamp(long value) {
      validate(fields()[1], value);
      this.stamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'stamp' field has been set */
    public boolean hasStamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'stamp' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder clearStamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder setType(com.voole.hobbit2.storm.test.kafka.avro.PlayType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'type' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'filled' field */
    public java.lang.CharSequence getFilled() {
      return filled;
    }
    
    /** Sets the value of the 'filled' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder setFilled(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.filled = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'filled' field has been set */
    public boolean hasFilled() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'filled' field */
    public com.voole.hobbit2.storm.test.kafka.avro.PlayBgn.Builder clearFilled() {
      filled = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PlayBgn build() {
      try {
        PlayBgn record = new PlayBgn();
        record.sessionId = fieldSetFlags()[0] ? this.sessionId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.stamp = fieldSetFlags()[1] ? this.stamp : (java.lang.Long) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (com.voole.hobbit2.storm.test.kafka.avro.PlayType) defaultValue(fields()[2]);
        record.filled = fieldSetFlags()[3] ? this.filled : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
