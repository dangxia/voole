/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.voole.hobbit2.camus.order.dry;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlayAliveDryRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlayAliveDryRecord\",\"namespace\":\"com.voole.hobbit2.camus.order.dry\",\"fields\":[{\"name\":\"sessID\",\"type\":\"string\"},{\"name\":\"natip\",\"type\":[\"long\",\"null\"]},{\"name\":\"playAliveTime\",\"type\":[\"long\",\"null\"]},{\"name\":\"avgspeed\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence sessID;
  @Deprecated public java.lang.Long natip;
  @Deprecated public java.lang.Long playAliveTime;
  @Deprecated public java.lang.Long avgspeed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PlayAliveDryRecord() {}

  /**
   * All-args constructor.
   */
  public PlayAliveDryRecord(java.lang.CharSequence sessID, java.lang.Long natip, java.lang.Long playAliveTime, java.lang.Long avgspeed) {
    this.sessID = sessID;
    this.natip = natip;
    this.playAliveTime = playAliveTime;
    this.avgspeed = avgspeed;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sessID;
    case 1: return natip;
    case 2: return playAliveTime;
    case 3: return avgspeed;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sessID = (java.lang.CharSequence)value$; break;
    case 1: natip = (java.lang.Long)value$; break;
    case 2: playAliveTime = (java.lang.Long)value$; break;
    case 3: avgspeed = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sessID' field.
   */
  public java.lang.CharSequence getSessID() {
    return sessID;
  }

  /**
   * Sets the value of the 'sessID' field.
   * @param value the value to set.
   */
  public void setSessID(java.lang.CharSequence value) {
    this.sessID = value;
  }

  /**
   * Gets the value of the 'natip' field.
   */
  public java.lang.Long getNatip() {
    return natip;
  }

  /**
   * Sets the value of the 'natip' field.
   * @param value the value to set.
   */
  public void setNatip(java.lang.Long value) {
    this.natip = value;
  }

  /**
   * Gets the value of the 'playAliveTime' field.
   */
  public java.lang.Long getPlayAliveTime() {
    return playAliveTime;
  }

  /**
   * Sets the value of the 'playAliveTime' field.
   * @param value the value to set.
   */
  public void setPlayAliveTime(java.lang.Long value) {
    this.playAliveTime = value;
  }

  /**
   * Gets the value of the 'avgspeed' field.
   */
  public java.lang.Long getAvgspeed() {
    return avgspeed;
  }

  /**
   * Sets the value of the 'avgspeed' field.
   * @param value the value to set.
   */
  public void setAvgspeed(java.lang.Long value) {
    this.avgspeed = value;
  }

  /** Creates a new PlayAliveDryRecord RecordBuilder */
  public static com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder newBuilder() {
    return new com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder();
  }
  
  /** Creates a new PlayAliveDryRecord RecordBuilder by copying an existing Builder */
  public static com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder newBuilder(com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder other) {
    return new com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder(other);
  }
  
  /** Creates a new PlayAliveDryRecord RecordBuilder by copying an existing PlayAliveDryRecord instance */
  public static com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder newBuilder(com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord other) {
    return new com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for PlayAliveDryRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlayAliveDryRecord>
    implements org.apache.avro.data.RecordBuilder<PlayAliveDryRecord> {

    private java.lang.CharSequence sessID;
    private java.lang.Long natip;
    private java.lang.Long playAliveTime;
    private java.lang.Long avgspeed;

    /** Creates a new Builder */
    private Builder() {
      super(com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sessID)) {
        this.sessID = data().deepCopy(fields()[0].schema(), other.sessID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.natip)) {
        this.natip = data().deepCopy(fields()[1].schema(), other.natip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.playAliveTime)) {
        this.playAliveTime = data().deepCopy(fields()[2].schema(), other.playAliveTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.avgspeed)) {
        this.avgspeed = data().deepCopy(fields()[3].schema(), other.avgspeed);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PlayAliveDryRecord instance */
    private Builder(com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord other) {
            super(com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.sessID)) {
        this.sessID = data().deepCopy(fields()[0].schema(), other.sessID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.natip)) {
        this.natip = data().deepCopy(fields()[1].schema(), other.natip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.playAliveTime)) {
        this.playAliveTime = data().deepCopy(fields()[2].schema(), other.playAliveTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.avgspeed)) {
        this.avgspeed = data().deepCopy(fields()[3].schema(), other.avgspeed);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'sessID' field */
    public java.lang.CharSequence getSessID() {
      return sessID;
    }
    
    /** Sets the value of the 'sessID' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder setSessID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sessID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sessID' field has been set */
    public boolean hasSessID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sessID' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder clearSessID() {
      sessID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'natip' field */
    public java.lang.Long getNatip() {
      return natip;
    }
    
    /** Sets the value of the 'natip' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder setNatip(java.lang.Long value) {
      validate(fields()[1], value);
      this.natip = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'natip' field has been set */
    public boolean hasNatip() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'natip' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder clearNatip() {
      natip = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'playAliveTime' field */
    public java.lang.Long getPlayAliveTime() {
      return playAliveTime;
    }
    
    /** Sets the value of the 'playAliveTime' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder setPlayAliveTime(java.lang.Long value) {
      validate(fields()[2], value);
      this.playAliveTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'playAliveTime' field has been set */
    public boolean hasPlayAliveTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'playAliveTime' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder clearPlayAliveTime() {
      playAliveTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'avgspeed' field */
    public java.lang.Long getAvgspeed() {
      return avgspeed;
    }
    
    /** Sets the value of the 'avgspeed' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder setAvgspeed(java.lang.Long value) {
      validate(fields()[3], value);
      this.avgspeed = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'avgspeed' field has been set */
    public boolean hasAvgspeed() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'avgspeed' field */
    public com.voole.hobbit2.camus.order.dry.PlayAliveDryRecord.Builder clearAvgspeed() {
      avgspeed = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PlayAliveDryRecord build() {
      try {
        PlayAliveDryRecord record = new PlayAliveDryRecord();
        record.sessID = fieldSetFlags()[0] ? this.sessID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.natip = fieldSetFlags()[1] ? this.natip : (java.lang.Long) defaultValue(fields()[1]);
        record.playAliveTime = fieldSetFlags()[2] ? this.playAliveTime : (java.lang.Long) defaultValue(fields()[2]);
        record.avgspeed = fieldSetFlags()[3] ? this.avgspeed : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
