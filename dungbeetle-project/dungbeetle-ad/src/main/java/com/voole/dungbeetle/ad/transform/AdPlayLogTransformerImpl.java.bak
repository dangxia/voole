package com.voole.dungbeetle.ad.transform.impl;

import java.io.IOException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.avro.specific.SpecificRecordBase;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.slf4j.LoggerFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.voole.dungbeetle.ad.dao.IPlatFormDao;
import com.voole.dungbeetle.ad.dao.IPlayLogDao;
import com.voole.dungbeetle.ad.exception.AdTransformException;
import com.voole.dungbeetle.ad.jms.queue.Message;
import com.voole.dungbeetle.ad.jms.queue.MessageQueue;
import com.voole.dungbeetle.ad.main.StartUp;
import com.voole.dungbeetle.ad.model.HiveTable;
import com.voole.dungbeetle.ad.model.PlayUrlAdEntity;
import com.voole.dungbeetle.ad.record.PlayLogHiveTableCreator;
import com.voole.dungbeetle.ad.record.avro.InterfacePlayLogDry;
import com.voole.dungbeetle.ad.record.avro.PlayLog;
import com.voole.dungbeetle.ad.transform.AdPlayLogTransformer;
import com.voole.dungbeetle.ad.util.AdLogToolUtil;
import com.voole.dungbeetle.ad.util.DateUtil;
import com.voole.dungbeetle.ad.util.GlobalProperties;
/**
 * interface_play_log_dry转换成play_log中的数据
 * @author jinyuchuan
 * @date 2014-9-12
 * 
 */
@Service
public class AdPlayLogTransformerImplBak implements AdPlayLogTransformer<InterfacePlayLogDry> {
	
	private org.slf4j.Logger log = LoggerFactory.getLogger(AdPlayLogTransformerImplBak.class);
	
	private static final String EXT ="ext"; 
	
	private final Map<String, HiveTable> partitionCache;

	private static SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
	
	private int isstackplaytime = GlobalProperties.getInteger("isstackplaytime");//##跟踪播放时长开关
	
	private int ispushnielsen = GlobalProperties.getInteger("ispushnielsen");//是否推送尼尔森播放数据 
	
	@Resource
	private IPlatFormDao platFormDao;
	
	@Resource
	private IPlayLogDao playLogDao;
	
	@Resource
	private MessageQueue messageQueue;
	
	public ClassPathXmlApplicationContext ctx = null;
	
	//全局缓存数据(广告信息通过planId_adfid可以唯一确定)
	public Map<String,Map<String,Object>> alladInfoMap = new HashMap<String,Map<String,Object>>();
	
	public Map<String,Map<String,Object>> alladPosMap = new HashMap<String,Map<String,Object>>();
	//从播控平台获取所有的栏目信息
	public Map<String,String> allChannelProgramByPlatformMap = new HashMap<String,String>();
	//广告所有的栏目信息
	public Map<String,Map<String,Object>> allChannelProgramByAdMap = new HashMap<String,Map<String,Object>>();
	//获取所有的区域信息
	public Map<String,Map<String,Object>> allAreaInfoMap = new HashMap<String,Map<String,Object>>();
	//根据mid(影片id)反查影片类型的列表
	public Map<String,String> allMovieTypesMap = new HashMap<String,String>();
	//获取常用频道信息的列表
	public Map<String,Map<String,String>> allChannelInfoMap = new HashMap<String,Map<String,String>>();
	
	public SimpleDateFormat sdf = new SimpleDateFormat("HH");
	
	public AdPlayLogTransformerImplBak(){
		partitionCache = new HashMap<String, HiveTable>();
	}
	
	@Override
	public void setup(TaskAttemptContext context) throws IOException,
			InterruptedException, AdTransformException {
    	try {
    		//初始化spring容器
    		ctx = StartUp.getSpringContext();
    		
    		//缓存广告信息数据
    		 List<Map<String,Object >> alladInfoListTemp =  playLogDao.findAllAdinfo();
    		 for(Map<String,Object> map : alladInfoListTemp){
    			 alladInfoMap.put(map.get("seqno").toString() + "_" + map.get("fid").toString(), map);
    		 }
    		 
    		 //缓存广告位置信息
    		 List<Map<String,Object >> alladPosListTemp =  playLogDao.findAllAdPos();
    		 for(Map<String,Object> map : alladPosListTemp){
    			 alladPosMap.put(map.get("seqno").toString(), map);
    		 }
    		 
    		 //缓存播控平台的所有栏目信息(以后通过sectionid获取)
    		 List<Map<String,Object >> allprogramnameListTemp =  platFormDao.findAllChannelProgramInfoAccessPlatform();
    		 for(Map<String,Object> map : allprogramnameListTemp){
    			 allChannelProgramByPlatformMap.put(map.get("progaramcode").toString(), map.get("channelname").toString()+"_"+map.get("programname").toString());
    		 }
    		 //缓存广告的所有栏目信息
    		 List<Map<String,Object >> allChannelProgramByAdListTemp =  playLogDao.findAllChannelProgramInfoAccessAd();
    		 for(Map<String,Object> map : allChannelProgramByAdListTemp){
    			 allChannelProgramByAdMap.put(map.get("adChannelName").toString()+"_"+map.get("adCategoryName").toString(), map);
    		 }
    		 //缓存区域信息
    		 List<Map<String,Object >> allAreaInfoListTemp =  playLogDao.findAllAreaInfos();
    		 for(Map<String,Object> map : allAreaInfoListTemp){
    			 allAreaInfoMap.put(map.get("code").toString(), map);
    		 }
    		 //缓存所有节目类型的列表
    		 List<Map<String,String>> allMovieTypeListTemp = platFormDao.findAllMovieTypes();
    		 for(Map<String,String> map : allMovieTypeListTemp){
    			 allMovieTypesMap.put(map.get("mid"), map.get("mtype"));
    		 }
    		 //缓存常用频道的信息列表
    		 List<Map<String,String>> allChannelInfoListTemp = playLogDao.findAllChannelInfos();
    		 for(Map<String,String> map : allChannelInfoListTemp){
    			 allChannelInfoMap.put(map.get("mtype"), map);
    		 }
		} catch (Exception e) {
			e.printStackTrace();
			log.error("加载spring配置文件失败！");
			System.exit(0);
		}
	}

	@Override
	public void cleanup(TaskAttemptContext context) throws IOException,
			InterruptedException {
		//关闭spring容器
		ctx.registerShutdownHook();
		//清空缓存数据
		alladInfoMap.clear();
		alladPosMap.clear();
		allChannelProgramByPlatformMap.clear();
		allChannelProgramByAdMap.clear();
		allAreaInfoMap.clear();
		allMovieTypesMap.clear();
		allChannelInfoMap.clear();
	}
	
	public HiveTable getTable(String partition) {
		if (!partitionCache.containsKey(partition)) {
			createHiveTable(partition);
		}
		return partitionCache.get(partition);
	}

	private synchronized void createHiveTable(String partition) {
		if (partitionCache.containsKey(partition)) {
			return;
		}
		partitionCache.put(partition,
				PlayLogHiveTableCreator.create(partition));
	}

	private String getDayPartition(String stamp) {
		return df.format(stamp);
	}
	
	/**
	 * 传递interface_play_log_dry 转化成play_log数据
	 * interface_play_log_dry到play_log表需要连接两个数据源：分别是广告平台的voole_ad库和播控平台的一个库
	 * @param dry
	 * @return
	 * @throws AdTransformException
	 */
	@Override
	public Map<HiveTable, List<SpecificRecordBase>> transform(InterfacePlayLogDry dry) throws AdTransformException {
		PlayLog record = new PlayLog();
		try {
			String playtimeObj = dry.getPlaytime().toString();//播放时间
			if(playtimeObj == null){
				throw new AdTransformException("传输的数据有异常，播放时长为空");
			}
			List<PlayUrlAdEntity> playUrlAdList = parsePlayUrl(dry);
			int listSize = playUrlAdList != null ?  playUrlAdList.size() : 0;
			for (int i = 0; i < listSize; i++) {
				PlayUrlAdEntity playUrlAdEntity = playUrlAdList.get(i);
				//判断是否为回看，回看中的广告fid等于播放的fid   回看广告中没有fid、播放起始时间、播放时长
				/**
				 * 回看暂时不处理，以前的逻辑获取不到sessionid(已从回传数据json串中删除)等信息，要从playurl中获取
				 */
				if("10".equals(playUrlAdEntity.getAdmergetype()) && StringUtils.isBlank(playUrlAdEntity.getFid())){
					this.lookbackPlay(dry, playUrlAdEntity,i);
				}
				// 播放时间小于广告起始时间(无需新增修改)
				if (Integer.parseInt(playtimeObj) < playUrlAdEntity.getStartTimeLength()) {
					break;
				}
				
				record.setStamp(new Timestamp(new java.util.Date().getTime()).toString());
				record.setLogid(playUrlAdEntity.getLogid());
				record.setSessionid(dry.getSessionid().toString());
				Object oemidObj = dry.getOemid();
				record.setOemid(Integer.parseInt(oemidObj != null ? oemidObj.toString() : "-1"));
				//adPlayStat.setOemname(interfacePlayLogMap.get("oemname"));
				//运营商id
				Object spidObj = dry.getSpid();
				record.setSpid(Integer.parseInt(spidObj != null ? spidObj.toString() : "-1"));
				//播放速度
				Object speedObj = dry.getSpeed();
				record.setSpeed(Integer.parseInt(speedObj != null ? speedObj.toString() : "-1"));
				//广告介质id
				record.setFid(playUrlAdEntity.getFid());
				//hid格式化
				record.setHid(dry.getHid().toString());
				//设置区域信息
				this.setCodeInfo(dry, record);
				//根据栏目code查询播控栏目名称
				String channelname_programname = allChannelProgramByPlatformMap.get(dry.getSectionid().toString());
				
				Map<String, Object> channelInfoMap = allChannelProgramByAdMap.get(channelname_programname);
				if(channelInfoMap !=null && channelInfoMap.size() > 0){
					Object channelid = channelInfoMap.get("adChannelCode");
					record.setChannelid(channelid != null ? Integer.valueOf(channelid.toString()) : GlobalProperties.getInteger("other.channelid"));
					record.setChannelname(channelInfoMap.get("adChannelName") + "");
					Object pragramid = channelInfoMap.get("adCategoryCode");
					record.setProgramid(pragramid != null ? Integer.valueOf(pragramid.toString()) : GlobalProperties.getInteger("other.channelid"));
					record.setProgramname(channelInfoMap.get("adCategoryName") + "");
				}else{
					//playurl中解析出mid(影片节目id) 去播控平台查询获取影片节目类型
					String mtype = allMovieTypesMap.get(playUrlAdEntity.getMid());
					if(StringUtils.isNotBlank(mtype)){
						Map<String, String> channemap = allChannelInfoMap.get(mtype);
						if(channemap != null && channemap.size() > 0){
							String channelid = channemap.get("adChannelCode");
							record.setChannelid(channelid != null ? Integer.valueOf(channelid.toString()) : GlobalProperties.getInteger("other.channelid"));
							record.setChannelname(channemap.get("adChannelName") + "");
							record.setProgramid(GlobalProperties.getInteger("other.channelid"));
							record.setProgramname("其它");
						}
					}
				}
				if(record.getChannelid() == null){
					record.setChannelid(GlobalProperties.getInteger("other.channelid"));
					record.setChannelname("其它");
					record.setProgramid(GlobalProperties.getInteger("other.channelid"));
					record.setProgramname("其它");
				}
				//时间设置
				Integer adPlayTimeLength = playUrlAdEntity.getPlayTimeLength();
				Integer playtime = Integer.parseInt(playtimeObj != null ? playtimeObj : "-1");
				Integer adStartTimeLength = playUrlAdEntity.getStartTimeLength();
				String starttime = dry.getStarttime().toString();
				//播放时间以及完整性设置
				setPlayTime(record, adPlayTimeLength, playtime, adStartTimeLength, starttime);
				//反查介质信息
				List<String> plnidList = playUrlAdEntity.getPlnidList(); //排期id列表
				
				//TODO 这种方式必须保证接口中发送的pln顺序和播放视频的介质id保持一致顺序
				String planid  = "";
				if(plnidList != null &&  plnidList.size() >= i){
					planid =  plnidList.get(i);
				}
				String adfid = playUrlAdEntity.getFid();
				//根据fid和排期id查询节目信息能够保证唯一
				Map<String, Object> adInfoMap =  alladInfoMap.get(planid + "_" + adfid);
				this.fillRecord(adInfoMap, record);
				//排期反查广告位置 
				Map<String, Object> adposmap = alladPosMap.get(planid);
				if(adposmap != null && adposmap.get("adposid") != null){
					record.setAdposid(Integer.valueOf(adposmap.get("adposid").toString()));
					record.setAdposname(adposmap.get("adposname") + "");
				}
				//设置是在哪个小时发送的一条记录
				String hour = record.getStarttime().toString().substring(10,13);
				if(hour.equals("00")){
					record.setPlaycnttime00(1);
				}else if(hour.equals("01")){
					record.setPlaycnttime01(1);
				}else if(hour.equals("02")){
					record.setPlaycnttime02(1);
				}else if(hour.equals("03")){
					record.setPlaycnttime03(1);
				}else if(hour.equals("04")){
					record.setPlaycnttime04(1);
				}else if(hour.equals("05")){
					record.setPlaycnttime05(1);
				}else if(hour.equals("06")){
					record.setPlaycnttime06(1);
				}else if(hour.equals("07")){
					record.setPlaycnttime07(1);
				}else if(hour.equals("08")){
					record.setPlaycnttime08(1);
				}else if(hour.equals("09")){
					record.setPlaycnttime09(1);
				}else if(hour.equals("10")){
					record.setPlaycnttime10(1);
				}else if(hour.equals("11")){
					record.setPlaycnttime11(1);
				}else if(hour.equals("12")){
					record.setPlaycnttime12(1);
				}else if(hour.equals("13")){
					record.setPlaycnttime13(1);
				}else if(hour.equals("14")){
					record.setPlaycnttime14(1);
				}else if(hour.equals("15")){
					record.setPlaycnttime15(1);
				}else if(hour.equals("16")){
					record.setPlaycnttime16(1);
				}else if(hour.equals("17")){
					record.setPlaycnttime17(1);
				}else if(hour.equals("18")){
					record.setPlaycnttime18(1);
				}else if(hour.equals("19")){
					record.setPlaycnttime19(1);
				}else if(hour.equals("20")){
					record.setPlaycnttime20(1);
				}else if(hour.equals("21")){
					record.setPlaycnttime21(1);
				}else if(hour.equals("22")){
					record.setPlaycnttime22(1);
				}else if(hour.equals("23")){
					record.setPlaycnttime23(1);
				}
				
				//TODO 跟踪收到的数据的播放时长和同一条数据收到几条数据
				if(isstackplaytime == 1){
					record.setOemname(playtimeObj);
				}
				
				//add 推送播放数据给尼尔森
				if(ispushnielsen == 1){
					record.setIp(dry.getIp().toString());
					Message msg = new Message();
					msg.setProducer(2);
					msg.setMessage(record);
					messageQueue.process(msg);
				}
				
			}
		} catch (Exception e) {
			throw new AdTransformException(e);
		}
		String partition = getDayPartition(record.getStamp().toString());
		Map<HiveTable, List<SpecificRecordBase>> result = new HashMap<HiveTable, List<SpecificRecordBase>>();
		result.put(getTable(partition),
				Lists.newArrayList((SpecificRecordBase) record));
		return result;
	}
	
	public static void main(String[] args) {
		String str = "2014-12-24 05:23:15";
		System.out.println(str.substring(10,13));
	}
	
	/**
	 * 
	 * 播放时间以及完整性设置
	 * @param playlog
	 * @param adPlayTimeLength
	 * @param playtime
	 * @param adStartTimeLength
	 * @param starttime
	 */
	private void setPlayTime(PlayLog playlog, Integer adPlayTimeLength, Integer playtime, Integer adStartTimeLength, String starttime) {
		try{
			DateFormat fmt =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
			playlog.setStarttime(DateUtil.dateDiff(fmt.parse(starttime), Calendar.SECOND, adStartTimeLength).toString());
			if (playtime != null && playtime >= adStartTimeLength + adPlayTimeLength) {// 完整播放
				playlog.setEndtime(DateUtil.dateDiff(fmt.parse(starttime), Calendar.SECOND, adStartTimeLength + adPlayTimeLength).toString());
				playlog.setPlaytime(adPlayTimeLength);
				playlog.setFullplay(1);
			} else {// 非完整播放
				playlog.setEndtime(DateUtil.dateDiff(fmt.parse(starttime), Calendar.SECOND, adStartTimeLength + playtime).toString());
				playlog.setPlaytime(playtime - adStartTimeLength);
				playlog.setFullplay(0);
			}
		}catch(ParseException e){
			log.error("时间转化异常" + e.getMessage() + "，starttime＝" + starttime);
		}
	}
	
	/**
	 * 
	 * 根据排期，广告介质id查询广告节目信息
	 * @param planId
	 * @param adfid
	 * @param playlog
	 */
	private void fillRecord(Map<String, Object> aminfomap, PlayLog playlog) {
		if (aminfomap != null && aminfomap.size() > 0) {
			//介质码流resolution  分辨率coderate adname都不缓存
			playlog.setResolution(aminfomap.get("resolution") + "");
			playlog.setMovname(aminfomap.get("adname") + "");
			if (aminfomap.get("coderate") != null) {
				playlog.setCoderate(Integer.parseInt(aminfomap.get("coderate").toString()));
			}
			if (aminfomap.get("duration") != null) {
				playlog.setAdlength(Integer.parseInt(aminfomap.get("duration").toString()));
			}
			if(aminfomap.get("amid") != null){
			    playlog.setAmid(Integer.valueOf(aminfomap.get("amid").toString()));
			}
			if (aminfomap.get("adverno") != null) {
				playlog.setAdverno(Integer.parseInt(aminfomap.get("adverno").toString()));
			}
			if (aminfomap.get("agentno") != null) {
				playlog.setAgentno(Integer.parseInt(aminfomap.get("agentno").toString()));
			}
			if (aminfomap.get("sid") != null) {
				playlog.setSid(Integer.parseInt(aminfomap.get("sid").toString()));
			}
		}else{
			playlog.setAmid(-1);
		}
	}
	
	public void lookbackPlay(InterfacePlayLogDry dry, PlayUrlAdEntity playUrlAdEntity, int i){
		//直播回看暂时不处理，潘玉涛说比较简单，不用现在的逻辑
	}
	
	/**
	 * 设置区域信息：省、市
	 * 有区域编码查询省市信息
	 * @param logMap
	 * @param playlog
	 */
	private void setCodeInfo(InterfacePlayLogDry dry, PlayLog playlog) {
			//TODO 根据区域编号查询省份和城市信息
			 Map<String, Object> areamap = allAreaInfoMap.get(dry.getArea().toString());
			 if(areamap != null){
				 if(areamap.get("provinceid") != null){
					 playlog.setProvinceid(Integer.valueOf(areamap.get("provinceid").toString()));
					 playlog.setProvincename(areamap.get("provincename")+"");
				 }
				 if(areamap.get("cityid") != null){
					 playlog.setCityid(Integer.valueOf(areamap.get("cityid").toString()));
					 playlog.setCityname(areamap.get("cityname")+"");
				 }
			 }else{
				 playlog.setProvinceid(0);
				 playlog.setProvincename("其他");
				 playlog.setCityid(0);
				 playlog.setCityname("其他");
			 }
	}
	
	/**
	 * 解析播放url
	 * 
	 * @param interfacePlayLog
	 * @return
	 */
	private List<PlayUrlAdEntity> parsePlayUrl(InterfacePlayLogDry dry) {
		List<PlayUrlAdEntity> playUrlAdList = new ArrayList<PlayUrlAdEntity>();
		String playurl = dry.getPlayurl().toString();
		//add panyt 2014-08-06  播放时长判断是否已添加cpm统计
		String playtime = dry.getPlaytime().toString();
		int playlength = 0;
		if(StringUtils.isNotBlank(playtime)){
			playlength = Integer.parseInt(playtime);
		}
		//新播放串肯定存在admt 解析播放串
		if (StringUtils.isNotBlank(playurl) && playurl.indexOf(EXT) > -1 ) {
			//截取播放串的广告信息
			String playurlExtStart = subplayUrl(playurl);
			if(StringUtils.isNotBlank(playurlExtStart)){
				String[] splitPlayUrlArr = null;
				//播放串中广告信息的分隔符不同的特殊处理
				if(playurlExtStart.indexOf(",") > -1){	//m3u8格式处理
					splitPlayUrlArr = playurlExtStart.split(",");
				}else if(playurlExtStart.indexOf("@") > -1){	//mp4格式处理
					splitPlayUrlArr = playurlExtStart.split("@");
				}
				if(splitPlayUrlArr!=null && splitPlayUrlArr.length >= 2){
					String admertypeValue = StringUtils.substringAfter(splitPlayUrlArr[0], ":");	//admergetype的值
					//splitPlayUrlArr[1] lgid以及排期信息
					String lgPlan = splitPlayUrlArr[1];
					String logidValue = "";
					List<String> plnList = null;
					if(StringUtils.isNotBlank(lgPlan)){
						//获取logid的value
						String regexLg = "lg:([a-zA-Z0-9]*)";
						List<String> lgList = AdLogToolUtil.regexMatch(regexLg, lgPlan, 1);
						String logidValueHx = lgList != null ? lgList.get(0) : null; //十六进制的投放logid的值
						//logidValue 由十六进制转为 十进制
						logidValue = logidValueHx != null ? Long.valueOf(logidValueHx, 16).toString() : "-1";
						//排期信息
						String regexPln = "pln:([a-zA-Z0-9]*)";
						 plnList = AdLogToolUtil.regexMatch(regexPln, lgPlan, 1);
						//由于客户端同一个播放视频会每两分钟上报一次播放记录，统计平台也会发送一次播放，为了避免同一次播放累计统计CPM，故CPM统计只统计两分钟内的播放，即第一次发送的数据
//						if(issendfrequency == 1 && (playlength <= intervalSendTime)){
//							sendFrequency(plnList);
//						}
					}
					//回看广告处理 add panyt 2014-07-02
					if("10".equals(admertypeValue)){
						PlayUrlAdEntity playUrlAdEntity = new PlayUrlAdEntity();
						playUrlAdEntity.setAdmergetype(admertypeValue);
						playUrlAdEntity.setLogid(StringUtils.trim(logidValue));
						//add panyt 2014-08-20  统计报表传递排期id
						playUrlAdEntity.setPlnidList(plnList);
						playUrlAdList.add(playUrlAdEntity);
					}
					//解析广告信息
					for(int i = 2; i < splitPlayUrlArr.length; i++){
						String[] splitPlayUrlValueArr = StringUtils.isNotBlank(splitPlayUrlArr[i]) ? splitPlayUrlArr[i].split(":") : null;
						if(splitPlayUrlValueArr != null && splitPlayUrlValueArr.length >= 3){
							PlayUrlAdEntity playUrlAdEntity = new PlayUrlAdEntity();
							playUrlAdEntity.setAdmergetype(admertypeValue);
							playUrlAdEntity.setLogid(StringUtils.trim(logidValue));
							playUrlAdEntity.setFid(splitPlayUrlValueArr[0]);	//介质id
							playUrlAdEntity.setStartTimeLength(StringUtils.isNotBlank(splitPlayUrlValueArr[1]) ? Integer.valueOf(splitPlayUrlValueArr[1]) : -1);	//广告开始时长
							playUrlAdEntity.setPlayTimeLength(StringUtils.isNotBlank(splitPlayUrlValueArr[2]) ? Integer.valueOf(splitPlayUrlValueArr[2]) : -1); //广告播放时长
							//单独处理m3u8格式的
							if(splitPlayUrlValueArr.length > 3){
								playUrlAdEntity.setAdSize(splitPlayUrlValueArr[3]);	//广告大小
							}
							//add panyt 2014-08-20  统计报表传递排期id
							playUrlAdEntity.setPlnidList(plnList);
							playUrlAdList.add(playUrlAdEntity);
						}
					}
				}
			}
		}
		return playUrlAdList;
	}
	
	/**
	 * 
	 * 截取播放串中的广告信息
	 * @param playurl
	 * @return
	 */
	private String subplayUrl(String playurl) {
		String playurlExtStart= "";
		if(playurl.indexOf(EXT) > -1){
			String exturl = playurl.substring(playurl.indexOf(EXT) + 4);
			if(playurl.indexOf(".m3u8") > -1){ //m3u8格式处理
				String[] m3u8Arr = exturl.split(";");
				for (String m3u8 : m3u8Arr) {
					if(m3u8.indexOf("admt")> -1){
						playurlExtStart = m3u8.substring(m3u8.indexOf("admt"), m3u8.indexOf("&"));
						break;
					}
				}
			}else{//MP4处理格式
				String[] mp4Arr = exturl.split(",");
				for (String mp4 : mp4Arr) {
					if(mp4.indexOf("admt") > -1){
						playurlExtStart = mp4;
						break;
					}
				}
			}
		}
		return playurlExtStart;
	}
}
