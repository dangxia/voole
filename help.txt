GIT-REMOTE(1)                                                                            Git Manual                                                                           GIT-REMOTE(1)



[1mNAME[0m
       git-remote - manage set of tracked repositories

[1mSYNOPSIS[0m
       [4mgit[24m [4mremote[24m [-v | --verbose]
       [4mgit[24m [4mremote[24m [4madd[24m [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=<fetch|push>] <name> <url>
       [4mgit[24m [4mremote[24m [4mrename[24m <old> <new>
       [4mgit[24m [4mremote[24m [4mremove[24m <name>
       [4mgit[24m [4mremote[24m [4mset-head[24m <name> (-a | -d | <branch>)
       [4mgit[24m [4mremote[24m [4mset-branches[24m [--add] <name> <branch>...
       [4mgit[24m [4mremote[24m [4mset-url[24m [--push] <name> <newurl> [<oldurl>]
       [4mgit[24m [4mremote[24m [4mset-url[24m [4m--add[24m [--push] <name> <newurl>
       [4mgit[24m [4mremote[24m [4mset-url[24m [4m--delete[24m [--push] <name> <url>
       [4mgit[24m [4mremote[24m [-v | --verbose] [4mshow[24m [-n] <name>...
       [4mgit[24m [4mremote[24m [4mprune[24m [-n | --dry-run] <name>...
       [4mgit[24m [4mremote[24m [-v | --verbose] [4mupdate[24m [-p | --prune] [(<group> | <remote>)...]


[1mDESCRIPTION[0m
       Manage the set of repositories ("remotes") whose branches you track.

[1mOPTIONS[0m
       -v, --verbose
           Be a little more verbose and show remote url after name. NOTE: This must be placed between remote and subcommand.

[1mCOMMANDS[0m
       With no arguments, shows a list of existing remotes. Several subcommands are available to perform operations on the remotes.

       [4madd[0m
           Adds a remote named <name> for the repository at <url>. The command git fetch <name> can then be used to create and update remote-tracking branches <name>/<branch>.

           With -f option, git fetch <name> is run immediately after the remote information is set up.

           With --tags option, git fetch <name> imports every tag from the remote repository.

           With --no-tags option, git fetch <name> does not import tags from the remote repository.

           With -t <branch> option, instead of the default glob refspec for the remote to track all branches under the refs/remotes/<name>/ namespace, a refspec to track only <branch> is
           created. You can give more than one -t <branch> to track multiple branches without grabbing all branches.

           With -m <master> option, a symbolic-ref refs/remotes/<name>/HEAD is set up to point at remoteâ€™s <master> branch. See also the set-head command.

           When a fetch mirror is created with --mirror=fetch, the refs will not be stored in the [4mrefs/remotes/[24m namespace, but rather everything in [4mrefs/[24m on the remote will be directly
           mirrored into [4mrefs/[24m in the local repository. This option only makes sense in bare repositories, because a fetch would overwrite any local commits.

           When a push mirror is created with --mirror=push, then git push will always behave as if --mirror was passed.

       [4mrename[0m
           Rename the remote named <old> to <new>. All remote-tracking branches and configuration settings for the remote are updated.

           In case <old> and <new> are the same, and <old> is a file under $GIT_DIR/remotes or $GIT_DIR/branches, the remote is converted to the configuration file format.

       [4mremove[24m, [4mrm[0m
           Remove the remote named <name>. All remote-tracking branches and configuration settings for the remote are removed.

       [4mset-head[0m
           Sets or deletes the default branch (i.e. the target of the symbolic-ref refs/remotes/<name>/HEAD) for the named remote. Having a default branch for a remote is not required,
           but allows the name of the remote to be specified in lieu of a specific branch. For example, if the default branch for origin is set to master, then origin may be specified
           wherever you would normally specify origin/master.

           With -d, the symbolic ref refs/remotes/<name>/HEAD is deleted.

           With -a, the remote is queried to determine its HEAD, then the symbolic-ref refs/remotes/<name>/HEAD is set to the same branch. e.g., if the remote HEAD is pointed at next,
           "git remote set-head origin -a" will set the symbolic-ref refs/remotes/origin/HEAD to refs/remotes/origin/next. This will only work if refs/remotes/origin/next already exists;
           if not it must be fetched first.

           Use <branch> to set the symbolic-ref refs/remotes/<name>/HEAD explicitly. e.g., "git remote set-head origin master" will set the symbolic-ref refs/remotes/origin/HEAD to
           refs/remotes/origin/master. This will only work if refs/remotes/origin/master already exists; if not it must be fetched first.

       [4mset-branches[0m
           Changes the list of branches tracked by the named remote. This can be used to track a subset of the available remote branches after the initial setup for a remote.

           The named branches will be interpreted as if specified with the -t option on the [4mgit[24m [4mremote[24m [4madd[24m command line.

           With --add, instead of replacing the list of currently tracked branches, adds to that list.

       [4mset-url[0m
           Changes URL remote points to. Sets first URL remote points to matching regex <oldurl> (first URL if no <oldurl> is given) to <newurl>. If <oldurl> doesnâ€™t match any URL, error
           occurs and nothing is changed.

           With [4m--push[24m, push URLs are manipulated instead of fetch URLs.

           With [4m--add[24m, instead of changing some URL, new URL is added.

           With [4m--delete[24m, instead of changing some URL, all URLs matching regex <url> are deleted. Trying to delete all non-push URLs is an error.

       [4mshow[0m
           Gives some information about the remote <name>.

           With -n option, the remote heads are not queried first with git ls-remote <name>; cached information is used instead.

       [4mprune[0m
           Deletes all stale remote-tracking branches under <name>. These stale branches have already been removed from the remote repository referenced by <name>, but are still locally
           available in "remotes/<name>".

           With --dry-run option, report what branches will be pruned, but do not actually prune them.

       [4mupdate[0m
           Fetch updates for a named set of remotes in the repository as defined by remotes.<group>. If a named group is not specified on the command line, the configuration parameter
           remotes.default will be used; if remotes.default is not defined, all remotes which do not have the configuration parameter remote.<name>.skipDefaultUpdate set to true will be
           updated. (See [1mgit-config[22m(1)).

           With --prune option, prune all the remotes that are updated.

[1mDISCUSSION[0m
       The remote configuration is achieved using the remote.origin.url and remote.origin.fetch configuration variables. (See [1mgit-config[22m(1)).

[1mEXAMPLES[0m
       Â·   Add a new remote, fetch, and check out a branch from it

               $ git remote
               origin
               $ git branch -r
                 origin/HEAD -> origin/master
                 origin/master
               $ git remote add staging git://git.kernel.org/.../gregkh/staging.git
               $ git remote
               origin
               staging
               $ git fetch staging
               ...
               From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
                * [new branch]      master     -> staging/master
                * [new branch]      staging-linus -> staging/staging-linus
                * [new branch]      staging-next -> staging/staging-next
               $ git branch -r
                 origin/HEAD -> origin/master
                 origin/master
                 staging/master
                 staging/staging-linus
                 staging/staging-next
               $ git checkout -b staging staging/master
               ...


       Â·   Imitate [4mgit[24m [4mclone[24m but track only selected branches

               $ mkdir project.git
               $ cd project.git
               $ git init
               $ git remote add -f -t master -m master origin git://example.com/git.git/
               $ git merge origin


[1mSEE ALSO[0m
       [1mgit-fetch[22m(1) [1mgit-branch[22m(1) [1mgit-config[22m(1)

[1mGIT[0m
       Part of the [1mgit[22m(1) suite



Git 1.8.4.5                                                                              01/21/2014                                                                           GIT-REMOTE(1)
